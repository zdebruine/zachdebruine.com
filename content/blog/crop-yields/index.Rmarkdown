---
title: "Train and analyze many models for #TidyTuesday crop yields"
author: Julia Silge
date: '2020-09-02'
slug: crop-yields
categories:
  - rstats
  - tidymodels
tags:
  - rstats
  - tidymodels
subtitle: ''
summary: "Learn how to use tidyverse and tidymodels functions to fit and analyze many models at once."
featured: no
image:
  caption: ''
  focal_point: ''
  preview_only: true
projects: []
---

```{r setup, include=FALSE}
library(knitr)
knitr::opts_chunk$set(cache = TRUE, warning = FALSE, message = FALSE, 
                      echo = TRUE, dpi = 300, cache.lazy = FALSE,
                      tidy = "styler", fig.width = 8, fig.height = 5)
library(scales)
library(tidyverse)
library(silgelib)
theme_set(theme_plex())
```


Lately I've been publishing [screencasts](https://juliasilge.com/category/tidymodels/) demonstrating how to use the [tidymodels](https://www.tidymodels.org/) framework, from just getting started to tuning more complex models. Today's screencast explores how to fluently apply tidy data principles to the task of building many models using with this week's [`#TidyTuesday` dataset](https://github.com/rfordatascience/tidytuesday) on crop yields. `r emo::ji("corn")`

```{r, echo=FALSE}
blogdown::shortcode("youtube", "rhhuNGjj3cU")
```

</br>

Here is the code I used in the video, for those who prefer reading instead of or in addition to video.

## Explore the data

Our modeling goal is to estimate how [crops yields are changing around the world using this week's #TidyTuesday dataset](https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-09-01/readme.md). We can build many models for the country-crop combinations we are interested in.

First, let's read in two of the datasets for this week.

```{r}
library(tidyverse)

key_crop_yields <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-09-01/key_crop_yields.csv') 
land_use <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-09-01/land_use_vs_yield_change_in_cereal_production.csv') 
```

I'm going to use the `land_use` dataset only to find the top population countries. Let's create a vector of their names.

```{r}
top_countries <- land_use %>%
  janitor::clean_names() %>%
  filter(!is.na(code), entity != "World") %>% 
  group_by(entity) %>% 
  filter(year == max(year)) %>% 
  ungroup %>% 
  slice_max(total_population_gapminder, n = 30) %>% 
  pull(entity)

top_countries
```

Now let's create a tidy version of the crop yields data, for the countries and crops I am interested in.

```{r}
tidy_yields <- key_crop_yields %>%
  janitor::clean_names() %>%
  pivot_longer(wheat_tonnes_per_hectare:bananas_tonnes_per_hectare, 
               names_to = "crop", values_to = "yield") %>%
  mutate(crop = str_remove(crop, "_tonnes_per_hectare")) %>%
  filter(crop %in% c("wheat", "rice", "maize", "barley"),
         entity %in% top_countries,
         !is.na(yield))

tidy_yields
```

This data structure is just right for plotting **crop yield over time**!

```{r, fig.width=14, fig.height=10}
tidy_yields %>%
  ggplot(aes(year, yield, color = crop)) +
  geom_line(alpha = 0.7, size = 1.5) +
  geom_point() +
  facet_wrap(~ entity, ncol = 5) +
  scale_x_continuous(guide = guide_axis(angle = 90)) +
  labs(x = NULL, y = "yield (tons per hectare)")
```

Notice that not all countries produce all crops, but that overall crop yields are _increasing_.


## Many models

Now let's fit a linear model to each country-crop combination.

```{r}
library(tidymodels)

tidy_lm <- tidy_yields %>%
    nest(yields = c(year, yield)) %>%
    mutate(model = map(yields, ~ lm(yield ~ year, data = .x)))

tidy_lm
```


Next, let's `tidy()` those models to get out the coefficients, and adjust the p-values for multiple comparisons while we're at it.

```{r}
slopes <- tidy_lm %>%
    mutate(coefs = map(model, tidy)) %>%
    unnest(coefs) %>%
    filter(term == "year") %>%
    mutate(p.value = p.adjust(p.value))

slopes
```


## Explore results

Now we can visualize the results of this modeling, which is estimating how crop yields are changing around the world.

```{r, fig.width=10, fig.height=8}
library(ggrepel)
slopes %>%
    ggplot(aes(estimate, p.value, label = entity)) +
    geom_vline(xintercept = 0, lty = 2, 
               size = 1.5, alpha = 0.7, color = "gray50") +
    geom_point(aes(color = crop), alpha = 0.8, size = 2.5, show.legend = FALSE) +
    scale_y_log10() +
    facet_wrap(~crop) +
    geom_text_repel(size = 3, family = "IBMPlexSans") +
    theme_light(base_family = "IBMPlexSans") +
    theme(strip.text = element_text(family = "IBMPlexSans-Bold", size = 12)) +
    labs(x = "increase in tons per hectare per year")
```


- On the x-axis is the slope of these models. Notice that most countries are on the positive side, with increasing crop yields. The further to the right a country is, the larger the increase in crop yield over this time period. Corn yields have increased the most.

- On the y-axis is the p-value, a measure of how surprising the effect we see is under the assumption of no relationship (no change with time). Countries lower in the plots have smaller p-values; we are more certain those are real relationships.

We can extend this to check out how well these models fit the data with `glance()`. This approach for using statistical models to estimate changes in many subgroups at once has been so helpful to me in many situations!



